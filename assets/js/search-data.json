{
  
    
        "post0": {
            "title": "Calendar Final Project",
            "content": "Welcome to Our Calendar . Below is a calendar (made from html!) that allows you (the user) to add any special events or activities for the month of November! We will be updating our product in the future so that you can include any important events for the entire year! . . November . Sunday Monday Tuesday Wednesday Thursday Friday Saturday . | | 1 | 2 | 3 | 4 | 5 | . 6 | 7 | 8 | 9 | 10 | 11 | 12 | . 13 | 14 | 15 | 16 | 17 | 18 | 19 | . 20 | 21 | 22 | 23 | 24 | 25 | 26 | . 27 | 28 | 29 | 30 | | | | . . . Please Feel Free to give us Feedback in the Comment Section! .",
            "url": "https://emaad-mir.github.io/ttitans-fastpages/calendar",
            "relUrl": "/calendar",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Team Blog",
            "content": "10/24 (Monday) . Our backend developer (Jishnu) made the code for the calendar API and table using Python, but we realized that we needed to use JavaScript in order to create it. We also realized that we needed to have our actual project show up here on our frontend (Fastpages). This was when we began to use this blog as a way to document our progress on the project. . 10/25 (Tuesday) . Our team was discussing about how we should go about creating the calendar in HTML, as whenever we tried to code in the actual markdown file, the calendar would not turn out like it was expected to. We created several issues that talked about problems regarding this, and would soon make GitHub issues that would explain the solutions to these problems. . 10/26 (Wednesday) . The Scrum Master (Emaad) found out that in order for us to build our calendar, we need to make an html file with all of the JavaScript/HTML in it and use the include command in order to display it on the actual markdown file. This worked out great, as we now have a calendar for the month of November and can begin the process of customizing it and implementing the API into it. At the moment, we are trying to figure out how we can make the numbers on the calendar appear on the top right of each cell, as this way, there will be space for all of the events that the user inputs. On this day, we collaborated with another group, Steven’s group where we collaborated on this problem, but still were not able to figure it out. . 10/27 (Thursday) . Today, we were trying to figure out how we were supposed to implement our API into our calendar. We made several issues regarding this topic and crossed over with other groups for assistance. While we are still trying to work on the code for our calendar API, we definitely have a better idea on how we can go about incorporating it into our final project. Tomorrow we plan on actually getting the API connected to our backend Flask application. We have also been updating our issues to show our progress and the problems we have been having so we can fix it as a group. It also allows us to keep progress of what we are and have been doing so it can be documented. . 10/28 (Friday) . Today we are going to get checked by Mr. Mortensen to see our commits and update him on our progress on our calendar project. We have gotten inspiration from calendy which Mr. Mortensen suggested us to take a look at. One of the problems that we had was the formatting on the tables width with the pixels because the word “Wednesday” is longer than the rest of the days in the week. The DevOps (Luka) will also make the changes to our docker-compose.yml in aws so that it will restart our service when there was a patch or an update. Our Backend (Jishnu) will finish his javascript code so it is interactive. Our Scrum Master fixed our table because our formatting was not even across the days. He will also help our backend and frontend with their roles. Our frontend (Edwin) today will customize our fastpage so it fits our groups theme. . 10/29, 30, 31 (Saturday, Sunday, and Monday) . Over the weekend, our scrum master (Emaad) was able to figure out how to add the API to the frontend and the backend and was able to input data onto the frontend table. Additionally, our Frontend Developer (Edwin) was able to figure out how to customize the home page a little bit with the background color and the scroll bar. . 11/1 (Tuesday) . Today our frontend (Edwin) will try to fix the button positioning on our calendar to add things to the calendar. Our ScrumMaster (Emaad) will work on fixing the button functions that add things to the calendar. Our backend (Jishnu) will try to add the data to the calendar for the holidays. The DevOps (Luka) will help the backend implement data into the calendar and blog about what we do on that day. . 11/2 (Wednesday) . So today, we decided to focus on refining our project and brainstormed some ways to make our project much more interactive for the people that will be coming to look at us present tomorrow at the Night at the Museum. Originally to make up for this, we wanted to make a feature that enables the user to input their specific event and the description for it and the date with the start and end event but Mr.Mortensen told us that it is a lot more complex than what he expects us to do so far so we scratched that idea and added it to possible upgrades in the future. We also added more events to the API. .",
            "url": "https://emaad-mir.github.io/ttitans-fastpages/markdown/2022/10/24/Team-Blog.html",
            "relUrl": "/markdown/2022/10/24/Team-Blog.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Our Group Flask Site",
            "content": "Our Group Flask . Our theme is Teen Titans, the original one . Our Group Flask Site . Group Flask Site .",
            "url": "https://emaad-mir.github.io/ttitans-fastpages/markdown/2022/10/22/Flask-Site.html",
            "relUrl": "/markdown/2022/10/22/Flask-Site.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://emaad-mir.github.io/ttitans-fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Blog",
          "content": "10/24 (Monday) . Our backend developer (Jishnu) made the code for the calendar API and table using Python, but we realized that we needed to use JavaScript in order to create it. We also realized that we needed to have our actual project show up here on our frontend (Fastpages). This was when we began to use this blog as a way to document our progress on the project. . 10/25 (Tuesday) . Our team was discussing about how we should go about creating the calendar in HTML, as whenever we tried to code in the actual markdown file, the calendar would not turn out like it was expected to. We created several issues that talked about problems regarding this, and would soon make GitHub issues that would explain the solutions to these problems. . 10/26 (Wednesday) . The Scrum Master (Emaad) found out that in order for us to build our calendar, we need to make an html file with all of the JavaScript/HTML in it and use the include command in order to display it on the actual markdown file. This worked out great, as we now have a calendar for the month of November and can begin the process of customizing it and implementing the API into it. At the moment, we are trying to figure out how we can make the numbers on the calendar appear on the top right of each cell, as this way, there will be space for all of the events that the user inputs. On this day, we collaborated with another group, Steven’s group where we collaborated on this problem, but still were not able to figure it out. . 10/27 (Thursday) . Today was a day where we made some issues and we also tried to make the calendar a little better. A problem that we tried to fix was make the API code on the backend. We wanted help from the teacher but we did not really get the chance because Mr. Mortensen was busy helping other groups. Today, we were trying to figure out how we were supposed to implement our API into our calendar. We made several issues regarding this topic and crossed over with other groups for assistance. While we are still trying to work on the code for our calendar API, we definitely have a better idea on how we can go about incorporating it into our final project. Tomorrow we plan on actually getting the API connected to our backend Flask application. We have also been updating our issues to show our progress and the problems we have been having so we can fix it as a group. It also allows us to keep progress of what we are and have been doing so it can be documented. . 10/28 (Friday) . Today we are going to get checked by Mr. Mortensen to see our commits and update him on our progress on our calendar project. We have gotten inspiration from calendy which Mr. Mortensen suggested us to take a look at. One of the problems that we had was the formatting on the tables width with the pixels because the word “Wednesday” is longer than the rest of the days in the week. The DevOps (Luka) will also make the changes to our docker-compose.yml in AWS so that it will restart our service when there was a patch or an update. Our Backend (Jishnu) will finish his javascript code so it is interactive. Our Scrum Master fixed our table because our formatting was not even across the days. He will also help our backend and frontend with their roles. Our frontend (Edwin) today will customize our fastpage so it fits our groups theme. . 10/29, 30, 31 (Saturday, Sunday, and Monday) . Over the weekend, our scrum master (Emaad) was able to figure out how to add the API to the frontend and the backend and was able to input data onto the frontend table. Additionally, our Frontend Developer (Edwin) was able to figure out how to customize the home page a little bit with the background color and the scroll bar. . 11/1 (Tuesday) . Today our frontend (Edwin) will try to fix the button positioning on our calendar to add things to the calendar. Our ScrumMaster (Emaad) will work on fixing the button functions that add things to the calendar. Our backend (Jishnu) will try to add the data to the calendar for the holidays. The DevOps (Luka) will help the backend implement data into the calendar and blog about what we do on that day. . 11/2 (Wednesday) . So today, we decided to focus on refining our project and brainstormed some ways to make our project much more interactive for the people that will be coming to look at us present tomorrow at the Night at the Museum. Originally to make up for this, we wanted to make a feature that enables the user to input their specific event and the description for it and the date with the start and end event but Mr. Mortensen told us that it is a lot more complex than what he expects us to do so far so we scratched that idea and added it to possible upgrades in the future. We also added more events to the API. . 11/3 (Thursday) . Today we are making our final changes for the design of our site, blog and the information about all of us. Later tonight we will also be attending Night At the Museum to show our project to others that we are attending. .",
          "url": "https://emaad-mir.github.io/ttitans-fastpages/blog/",
          "relUrl": "/blog/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://emaad-mir.github.io/ttitans-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}